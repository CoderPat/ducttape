-injars      ../ducttape.tmp.jar
-injars      ../lib/scala/scala-library-2.10.0.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/commons-io-2.2.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/commons-lang3-3.1.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/grizzled-slf4j_2.9.1-1-0.6.8.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/pegdown-1.1.0.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/scala-optparse-1.1.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/servlet-api-3.0.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/slf4j-api-1.6.4.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/slf4j-jdk14-1.6.4.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/sqlitejdbc-v056.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)

-injars      ../lib/asm-all-3.3.1.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/jetty-all-8.0.4.v20111024.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/parboiled-core-1.0.2.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/parboiled-java-1.0.2.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/scala-io-core_2.9.1-0.3.0.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)
-injars      ../lib/scala-io-file_2.9.1-0.3.0.jar(!META-INF/MANIFEST.MF,!META-INF/*.SF,!META-INF/*.txt,!META-INF/LICENSE,!META-INF/NOTICE,!**/*.html)

# Unit testing JARs
-libraryjars ../lib/test/junit-4.10.jar
-libraryjars ../lib/test/scalatest_2.10.0-2.0.M5.jar

# For OSX, this may be at javaHome.getParent()) / "Classes"/ "classes.jar"
-libraryjars <java.home>/lib/rt.jar
-outjars     ../ducttape.jar

#-dontwarn scala.**
#-dontwarn scalax.**
#-verbose

### Ducttape proguard options ###

# keep dynamically bound logger implementation
-keep class org.slf4j.impl.*
-dontnote # be far less verbose

# Defaults from the XSBT proguard plugin
# See https://github.com/siasia/xsbt-proguard-plugin/blob/master/src/main/scala/ProguardPlugin.scala
-dontwarn
-dontoptimize
-dontobfuscate

# preserve enums
-keepclassmembers enum * {
  public static **[] values();
  public static ** valueOf(java.lang.String);
}



### Standard proguard - Scala flags ##

-keepclasseswithmembers public class Ducttape {
    public static void main(java.lang.String[]);
}
#-keepclasseswithmembers public class * {
#    public static void main(java.lang.String[]);
#}

-keep class * implements org.xml.sax.EntityResolver

-keepclassmembers class * {
    ** MODULE$;
}

-keepclassmembernames class scala.concurrent.forkjoin.ForkJoinPool {
    long eventCount;
    int  workerCounts;
    int  runControl;
    scala.concurrent.forkjoin.ForkJoinPool$WaitQueueNode syncStack;
    scala.concurrent.forkjoin.ForkJoinPool$WaitQueueNode spareStack;
}

-keepclassmembernames class scala.concurrent.forkjoin.ForkJoinWorkerThread {
    int base;
    int sp;
    int runState;
}

-keepclassmembernames class scala.concurrent.forkjoin.ForkJoinTask {
    int status;
}

-keepclassmembernames class scala.concurrent.forkjoin.LinkedTransferQueue {
    scala.concurrent.forkjoin.LinkedTransferQueue$PaddedAtomicReference head;
    scala.concurrent.forkjoin.LinkedTransferQueue$PaddedAtomicReference tail;
    scala.concurrent.forkjoin.LinkedTransferQueue$PaddedAtomicReference cleanMe;
}